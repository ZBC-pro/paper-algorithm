import numpy as np
from hmmlearn.hmm import CategoricalHMM


def create_hmm_model(pi, A, B):
    """
    创建并初始化一个 MultinomialHMM 模型。

    :param pi: 初始状态概率分布 (1D numpy 数组)。
    :param A: 状态转移概率矩阵 (2D numpy 数组)。
    :param B: 发射概率矩阵 (2D numpy 数组)。
    :return: 初始化后的 MultinomialHMM 模型。
    """
    # 检查输入矩阵的正确性
    pi = np.array(pi)
    A = np.array(A)
    B = np.array(B)

    assert np.allclose(pi.sum(), 1), "初始状态概率分布 (pi) 的和必须为 1"
    assert np.allclose(A.sum(axis=1), 1), "状态转移矩阵 (A) 的每行和必须为 1"
    assert np.allclose(B.sum(axis=1), 1), "发射概率矩阵 (B) 的每行和必须为 1"

    n_states = len(pi)  # 隐藏状态的数量
    n_symbols = B.shape[1]  # 观测符号的数量

    # 初始化 MultinomialHMM 模型
    model = CategoricalHMM(n_components=n_states, random_state=42, n_iter=100, tol=1e-4, init_params="")

    # 设置模型的初始参数
    model.startprob_ = pi  # 初始状态概率
    model.transmat_ = A  # 状态转移矩阵
    model.emissionprob_ = B  # 发射概率矩阵

    print("HMM 模型已创建：")
    print("初始状态概率 (pi):")
    print(model.startprob_)
    print("状态转移矩阵 (A):")
    print(model.transmat_)
    print("发射概率矩阵 (B):")
    print(model.emissionprob_)

    return model


# 示例用法
if __name__ == "__main__":
    # 定义初始参数
    pi = [0.32222222222222224, 0.17777777777777778, 0.05555555555555555, 0.0, 0.4444444444444444]  # 初始状态概率
    A = [
        [0.8353982300884956, 0.06725663716814159, 0.08849557522123894, 0.0, 0.008849557522123894],
        [0.0011173184357541898, 0.9474860335195531, 0.008938547486033519, 0.0, 0.042458100558659215],
        [0.0017452006980802793, 0.04363001745200698, 0.9066317626527051, 0.0008726003490401396, 0.04712041884816754],
        [0.0, 0.012958963282937365, 0.0, 0.9870410367170627, 0.0],
        [0.04282315622521808, 0.0023790642347343376, 0.035685963521015066, 0.0317208564631245, 0.887390959555908]
    ]
    B = [
        [0.3746312684365782, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336, 0.4587020648967552, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336],
        [0.020833333333333336, 0.4963041182682154, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336, 0.33702921506511796, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336],
        [0.02083333333333334, 0.02083333333333334, 0.4721741637831604, 0.02083333333333334, 0.02083333333333334, 0.02083333333333334, 0.02083333333333334, 0.3611591695501731, 0.02083333333333334, 0.02083333333333334],
        [0.020833333333333336, 0.020833333333333336, 0.020833333333333336, 0.4175457102672293, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336, 0.020833333333333336, 0.4157876230661041, 0.020833333333333336],
        [0.020833333333333332, 0.020833333333333332, 0.020833333333333332, 0.020833333333333332, 0.45251249671139165, 0.020833333333333332, 0.020833333333333332, 0.020833333333333332, 0.020833333333333332, 0.38082083662194155]
    ]

    # 创建并初始化 HMM 模型
    hmm_model = create_hmm_model(pi, A, B)